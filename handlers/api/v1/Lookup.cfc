component output="false" extends="baseAPI" singleton {	this.Event_cache_suffix = "";	this.prehandler_only = "";	this.prehandler_except = "";	this.posthandler_only = "";	this.posthandler_except = "";	this.aroundHandler_only = "";	this.aroundHandler_except = "";	this.allowedMethods = {};	function preHandler(event,rc,prc,action){		super.preHandler(argumentCollection=arguments);	}	function postHandler(event,rc,prc,action){		super.postHandler(argumentCollection=arguments);	}	function onError(event,rc,prc,faultAction,exception){		super.onError(argumentCollection=arguments);	}		public void function get(event,rc,prc) {		var LookupService = getModel('LookupService');				var id = event.getValue('id',0);				var Lookup = LookupService.get( rc.id );				if( Lookup.hasLog() && Lookup.getLog().hasApp() && Lookup.getLog().getApp().hasUser() && Lookup.getLog().getApp().getUser().getID() eq rc.User.getID() ) {			prc.response.data.results = Lookup.toJSON();
		} else {			throw(message="Couldn't find Lookup###id# that belongs to requested apiKey", type="LookupAPI.Unauthorized");
		}
	}	public void function lookup(event,rc,prc) {		var LookupService = getModel('LookupService');		var CommentService = getModel('CommentService');				var Comment = CommentService.get(  event.getValue('id',0) );				if( !IsNull(Comment) && Comment.hasLog() && Comment.getLog().hasApp() && Comment.getLog().getApp().hasUser() && Comment.getLog().getApp().getUser().getID() eq rc.User.getID() ) {		var Lookups = LookupService.lookupComment(Comment);			prc.response.data.results = prc.BaseObject.arrayToJSON( Lookups );		} else {			throw(message="Couldn't find Comment###event.getValue('id',0)# that belongs to requested apiKey", type="LookupAPI.Unauthorized");		}	}}